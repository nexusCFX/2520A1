/*
  Created by: Brandon Chester
  Based on: tiny.cup by Dr. Fei Song
  File Name: CM.cup
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal IF, ELSE, WHILE;
terminal INT, VOID, RETURN;
terminal ASSIGN, EQ, LT, GT, PLUS, MINUS, TIMES, OVER, LPAREN, RPAREN, LBRACE, RBRACE, LSQUARE, RSQUARE, COMMA, SEMI;
terminal String NE, LE, GE;
terminal String ID, NUM;
terminal ERROR;

// A lot of these are subclass types but we have them here as the abstract superclasses.
non terminal DecList program, declaration_list;
non terminal Dec declaration, fun_declaration;

non terminal VarDecList param_list, local_declarations, params;
non terminal VarDec var_declaration, param;
non terminal Var var;

non terminal ExpList statement_list, arg_list, args;
non terminal Exp statement, expression_stmt, selection_stmt, iteration_stmt, return_stmt, compound_stmt;
non terminal Exp expression, simple_expression, additive_expression, term, factor, call;

non terminal NameTy type_specifier;
non terminal int relop, mulop, addop;


/* ----------------------------Grammar Section-------------------- */
   
start with program;

program	     ::= declaration_list:d
                 {: RESULT = d; :}
               ;


declaration_list ::= declaration_list:dl declaration:d
                     {:
                        DecList t = dl;
                        while(t.tail != null) {
                            t = t.tail;
                        }
                        t.tail = new DecList(d, null);
                        RESULT = d1;
                     :}
                   | declaration:d
                     {:
                        RESULT = new DecList(d, null);
                     :}
                   ;

declaration      ::= var_declaration:v
                     {:
                        RESULT = v;
                     :}
                   | fun_declaration:f
                     {:
                        RESULT = f;
                     :}
                   ;

var_declaration  ::= type_specifier:t ID:i SEMI
                     {:
                        RESULT = new SimpleDec(tleft, tright, t, i);
                     :}
                   | type_specifier:t ID:i LSQUARE NUM:n RSQUARE SEMI
                     {:
                        IntExp ie = new IntExp(ileft, n);
                        RESULT = new ArrayDec(tleft, tright, t, i, ie);
                     :}
                   ;

type_specifier   ::= INT
                     {:
                        RESULT = new NameTy(ileft, iright, NameTy.INT);
                     :}
                   | VOID
                     {:
                        RESULT = new NameTy(ileft, iright, NameTy.VOID);
                     :}
                   ;

fun_declaration  ::= type_specifier:t ID:i LPAREN params:pl RPAREN compound_stmt:cs
                     {:
                        RESULT = new FunctionDec(tleft, tright, t, i, p, c);
                     :}
                   ;

params           ::= param_list:pl
                     {:
                        RESULT = pl;
                     :}
                   | VOID
                     {:
                     :}
                   ;

param_list       ::= param_list:pl COMMA param:p
                     {:
                     :}
                   | param:p
                     {:
                        RESULT = new VarDecList(p, null);
                     :}
                   ;

param            ::= type_specifier:t ID:i
                     {:
                        RESULT = new SimpleDec(tleft, tright, t, i);
                     :}
                   | type_specifier:t ID:i LSQUARE RSQUARE
                     {:
                        // Is it okay to just make the IntExp null?
                        RESULT = new ArrayDec(tleft, tright, t, i, null);
                     :}
                   ;

compound_stmt    ::= LBRACE local_declarations:ld statement_list:sl RBRACE
                     {:
                        RESULT = new CompoundExp(slleft, slright, ld, sl);
                     :}
                   ;

local_declarations ::= local_declarations:ld var_declaration:vd
                       {:
                            RESULT = new VarDecList(vd, ld);
                       :}
                     |
                     ;

statement_list   ::= statement_list:sl statement:vd
                     {:
                        RESULT = new ExpList(vd, sl);
                     :}
                   |
                   ;

statement        ::= expression_stmt:e
                     {:
                        RESULT = e;
                     :}
                   | compound_stmt:c
                     {:
                        RESULT = c;
                     :}
                   | selection_stmt:s
                     {:
                        RESULT = s;
                     :}
                   | iteration_stmt:i
                     {:
                        RESULT = i;
                     :}
                   | return_stmt:r
                     {:
                        RESULT = r;
                     :}
                   ;

expression_stmt  ::= expression:e SEMI
                     {:
                        RESULT = e;
                     :}
                   | SEMI
                   ;

selection_stmt   ::= IF LPAREN expression:e RPAREN statement:s
                     {:
                        RESULT = new IfExp(eleft, eright, e, s, null);
                     :}
                   | IF LPAREN expression:e RPAREN statement:s ELSE statement:s2
                     {:
                        RESULT = new IfExp(eleft, eright, e, s, s2);
                     :}
                   ;

iteration_stmt   ::= WHILE LPAREN expression:e RPAREN statement:s
                     {:
                        RESULT = new WhileExp(eleft, eright, e, s);
                     :}
                   ;

return_stmt      ::= RETURN expression:e SEMI
                     {:
                        RESULT = new ReturnExp(rleft, rright, e);
                     :}
                   | RETURN SEMI
                     {:
                        RESULT = new ReturnExp(rleft, rright, null);
                     :}
                   ;

expression       ::= var:v ASSIGN expression:e
                     {:
                        VarExp ve = new VarExp(vleft, vright, v);
                        RESULT = new AssignExp(vleft, vright, ve, e);

                     :}
                   | simple_expression:se
                     {:
                        RESULT = s;
                     :}
                   ;

var              ::= ID:i
                     {:
                        RESULT = new SimpleVar(ileft, iright, i);
                     :}
                   | ID:i LSQUARE expression:e RSQUARE
                     {:
                        RESULT = new IndexVar(ileft, iright, i, e);
                     :}
                   ;

simple_expression ::= additive_expression:a1 relop:r additive_expression:a2
                      {:
                        RESULT = new OpExp(a1left, a1right, a1, r, a2);
                      :}
                    | additive_expression:a
                      {:
                        RESULT = a;
                      :}
                    ;

relop            ::= LE:r
                     {:
                        RESULT = OpExp.LE;
                     :}
                   | LT:r
                     {:
                        RESULT = OpExp.LT;
                     :}
                   | GT:r
                     {:
                        RESULT = OpExp.GT;
                     :}
                   | GE:r
                     {:
                        RESULT = OpExp.GE;
                     :}
                   | EQ:r
                     {:
                        RESULT = OpExp.EQ;
                     :}
                   | NE:r
                     {:
                        RESULT = OpExp.NE;
                     :}
                   ;

additive_expression ::= additive_expression:ae addop:ao term:t
                        {:
                            RESULT = new OpExp(aeleft, aeright, ae, ao, t);
                        :}
                      | term:t
                        {:
                            RESULT = t;
                        :}
                      ;

addop          ::= PLUS
                   {:
                        RESULT = OpExp.PLUS;
                   :}
                 | MINUS
                   {:
                        RESULT = OpExp.MINUS;
                   :}
                 ;

term           ::= term:t mulop:m factor:f
                   {:
                        RESULT = new OpExp(tleft, tright, t, m, f);
                   :}
                 | factor:f
                   {:
                        RESULT = f;
                   :}
                 ;

mulop          ::= TIMES
                   {:
                        RESULT = OpExp.MUL;
                   :}
                 | OVER
                   {:
                        RESULT = OpExp.DIV;
                   :}
                 ;

factor         ::= LPAREN expression:e RPAREN
                   {:
                        RESULT = e;
                   :}
                 | var:v
                   {:
                       RESULT = new VarExp(vleft, vright, v);
                   :}
                 | call:c
                   {:
                        RESULT = c;
                   :}
                 | NUM:n
                   {:
                        RESULT = new IntExp(nleft, nright, n);
                   :}
                 ;

call           ::= ID:i LPAREN args:a RPAREN
                   {:
                        RESULT = new CallExp(ileft, iright, i, a);
                   :}
                 ;

args           ::= arg_list:a
                   {:
                        RESULT = a;
                   :}
                 |
                 ;

arg_list       ::= arg_list:a COMMA expression:e
                   {:
                   :}
                 | expression:e
                   {:
                   :}
                 ;